package com.example.bluetoothexample;

import android.app.Activity;
import android.app.AlertDialog;
import android.bluetooth.BluetoothAdapter;
import android.bluetooth.BluetoothDevice;
import android.content.DialogInterface;
import android.content.Intent;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.util.Log;
import android.view.Menu;
import android.view.MenuItem;
import android.widget.ArrayAdapter;
import android.widget.TextView;
import android.widget.Toast;

public class MainActivity extends Activity {

	 public static final boolean DEBUG = true;
	 private static final String TAG = "BluetoothExample";
	 private static BluetoothSerialService mSerialService = null;
	 
	private boolean mEnablingBT;
    private boolean mLocalEcho = false;
	private MenuItem mMenuItemConnect;
    private static TextView mTitle;
	
	private String mConnectedDeviceName = null;
	private ArrayAdapter<String> mConversationArratAdapter;
	private StringBuffer mOutStringBuffer;
	private BluetoothAdapter mBluetoothAdapter = null;

    private static final int REQUEST_CONNECT_DEVICE_SECURE = 1;
    private static final int REQUEST_CONNECT_DEVICE_INSECURE = 2;
    private static final int REQUEST_ENABLE_BT = 3;
    
    public static final int MESSAGE_STATE_CHANGE = 1;
    public static final int MESSAGE_READ = 2;
    public static final int MESSAGE_WRITE = 3;
    public static final int MESSAGE_DEVICE_NAME = 4;
    public static final int MESSAGE_TOAST = 5;	
    
    public static final String DEVICE_NAME = "device_name";
    public static final String TOAST = "toast";	

    
	private byte receiveCnt = 0;
	private byte [] receiveBuf = new byte [8];

    
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		
		mBluetoothAdapter = BluetoothAdapter.getDefaultAdapter();

		if (mBluetoothAdapter == null) {
	            finishDialogNoBluetooth();
	            return;
		}

	        mSerialService = new BluetoothSerialService(this, mHandlerBT);            
	    }	


		@Override
		public void onStart() {
			super.onStart();
			if (DEBUG)
				Log.e(TAG, "++ ON START ++");
			
			mEnablingBT = false;	
			
		}

		@Override
		public synchronized void onResume() {
			super.onResume();

			if (DEBUG) {
				Log.e(TAG, "+ ON RESUME +");
			}	
			
			
			if (!mEnablingBT) { // If we are turning on the BT we cannot check if it's enable
			    if ( (mBluetoothAdapter != null)  && (!mBluetoothAdapter.isEnabled()) ) {
				
	                AlertDialog.Builder builder = new AlertDialog.Builder(this);
	                builder.setMessage(R.string.alert_dialog_turn_on_bt)
	                    .setIcon(android.R.drawable.ic_dialog_alert)
	                    .setTitle(R.string.alert_dialog_warning_title)
	                    .setCancelable( false )
	                    .setPositiveButton(R.string.alert_dialog_yes, new DialogInterface.OnClickListener() {
	                    	public void onClick(DialogInterface dialog, int id) {
	                    		mEnablingBT = true;
	                    		Intent enableIntent = new Intent(BluetoothAdapter.ACTION_REQUEST_ENABLE);
	                    		startActivityForResult(enableIntent, REQUEST_ENABLE_BT);			
	                    	}
	                    })
	                    .setNegativeButton(R.string.alert_dialog_no, new DialogInterface.OnClickListener() {
	                    	public void onClick(DialogInterface dialog, int id) {
	                    		finishDialogNoBluetooth();            	
	                    	}
	                    });
	                AlertDialog alert = builder.create();
	                alert.show();
	}		
			
			    if (mSerialService != null) {
			    	// Only if the state is STATE_NONE, do we know that we haven't started already
			    	if (mSerialService.getState() == BluetoothSerialService.STATE_NONE) {
			    		// Start the Bluetooth chat services
			    		mSerialService.start();
			    	}
			    }

			    if (mBluetoothAdapter != null) {
			    	//readPrefs();
			    	//updatePrefs();

			    	//mEmulatorView.onResume();
			    }
			}
		}
	    @Override
	    public void onStop() {
	        super.onStop();
	        if(DEBUG)
	        	Log.e(TAG, "-- ON STOP --");
	        
	            
	    }


		@Override
		public void onDestroy() {
			super.onDestroy();
			if (DEBUG)
				Log.e(TAG, "--- ON DESTROY ---");
			
	        if (mSerialService != null)
	        	mSerialService.stop();
	        
		}
		
		protected void onPause() {
			super.onPause();
		}
		 
	    public int getConnectionState() {
			return mSerialService.getState();
		}


	    public void send(byte[] out) {
	    	mSerialService.write( out );
	    }

	    public int getTitleHeight() {
	    	return mTitle.getHeight();
	    }
	    
	    // The Handler that gets information back from the BluetoothService
	   
 private final Handler mHandlerBT = new Handler() {
	    	
	        @Override
	        public void handleMessage(Message msg) {        	
	            switch (msg.what) {
	            case MESSAGE_STATE_CHANGE:
	                if(DEBUG) Log.i(TAG, "MESSAGE_STATE_CHANGE: " + msg.arg1);
	                switch (msg.arg1) {
	                case BluetoothSerialService.STATE_CONNECTED:
	                	if (mMenuItemConnect != null) {
	                		mMenuItemConnect.setIcon(android.R.drawable.ic_menu_close_clear_cancel);
	                		mMenuItemConnect.setTitle(R.string.disconnect);
	                	}
	                	
	                	//mInputManager.showSoftInput(mEmulatorView, InputMethodManager.SHOW_IMPLICIT);
	                	
	                    mTitle.setText(R.string.title_connected_to);
	                    mTitle.append(mConnectedDeviceName);
	                    break;
	                    
	                case BluetoothSerialService.STATE_CONNECTING:
	                    mTitle.setText(R.string.title_connecting);
	                    break;
	                    
	                case BluetoothSerialService.STATE_LISTEN:
	                case BluetoothSerialService.STATE_NONE:
	                	if (mMenuItemConnect != null) {
	                		mMenuItemConnect.setIcon(android.R.drawable.ic_menu_search);
	                		mMenuItemConnect.setTitle(R.string.connect);
	                	}

	            		//mInputManager.hideSoftInputFromWindow(mEmulatorView.getWindowToken(), 0);
	                	
	                    mTitle.setText(R.string.title_not_connected);
	                    break;
	                }
	                break;
	            case MESSAGE_WRITE:
	            	if (mLocalEcho) {
	            		byte[] writeBuf = (byte[]) msg.obj;
	            		//mEmulatorView.write(writeBuf, msg.arg1);
	            	}
	                
	                break;
	                
	            case MESSAGE_READ:

	                int Cnt;
	                
	            	byte[] readBuf = (byte[]) msg.obj;              
	                //mEmulatorView.write(readBuf, msg.arg1);
	                
	                Cnt = (byte) msg.arg1;
	                

	                	
	                if(DEBUG){
	                	Log.e(TAG, "MESSAGE READ : "+Cnt);    
	                	Log.e(TAG, readBuf[0]+","+readBuf[1]+","+readBuf[2]+","+readBuf[3]+","+readBuf[4]+","+readBuf[5]+","+readBuf[6]+","+readBuf[7]);    
	                }  
	                
	                for(int i = 0; i < Cnt; i++){
	                	receiveBuf[receiveCnt] = readBuf[i];
	                	receiveCnt++;
	                }                
	                
	                if(receiveCnt >= 8){
	                	receiveBufDecoding();
	                	receiveCnt = 0;
	                }
	                
	                
	                
	                break;
	               
	            case MESSAGE_DEVICE_NAME:
	                // save the connected device's name
	                mConnectedDeviceName = msg.getData().getString(DEVICE_NAME);
	                Toast.makeText(getApplicationContext(), "Connected to "
	                               + mConnectedDeviceName, Toast.LENGTH_SHORT).show();
	                break;
	            case MESSAGE_TOAST:
	                Toast.makeText(getApplicationContext(), msg.getData().getString(TOAST),
	                               Toast.LENGTH_SHORT).show();
	                break;
	            }
	        }
	    };    
			
	   public void onActivityResult(int requestCode, int resultCode, Intent data) {
	        if(DEBUG) Log.d(TAG, "onActivityResult " + resultCode);
	        switch (requestCode) {
	        
	        case REQUEST_CONNECT_DEVICE_SECURE:

	            // When DeviceListActivity returns with a device to connect
	            if (resultCode == Activity.RESULT_OK) {
	                // Get the device MAC address
	                String address = data.getExtras()
	                                     .getString(DeviceListActivity.EXTRA_DEVICE_ADDRESS);
	                // Get the BLuetoothDevice object
	                BluetoothDevice device = mBluetoothAdapter.getRemoteDevice(address);
	                // Attempt to connect to the device
	                mSerialService.connect(device);                
	            }
	            break;

	        case REQUEST_ENABLE_BT:
	            // When the request to enable Bluetooth returns
	            if (resultCode == Activity.RESULT_OK) {
	                Log.d(TAG, "BT not enabled");
	                
	                finishDialogNoBluetooth();                
	            }
	        }
	   }
	   
	    public void finishDialogNoBluetooth() {
	        AlertDialog.Builder builder = new AlertDialog.Builder(this);
	        builder.setMessage(R.string.alert_dialog_no_bt)
	        .setIcon(android.R.drawable.ic_dialog_info)
	        .setTitle(R.string.app_name)
	        .setCancelable( false )
	        .setPositiveButton(R.string.alert_dialog_ok, new DialogInterface.OnClickListener() {
	                   public void onClick(DialogInterface dialog, int id) {
	                       finish();            	
	                	   }
	               });
	        AlertDialog alert = builder.create();
	        alert.show(); 
	    }
	    
	    public void receiveBufDecoding() {
	    	if((receiveBuf[0] == 0x0b)&&(receiveBuf[1] == 0x0b)){
	    		
	    		if((receiveBuf[2] == 0x03)&&(receiveBuf[3] == 0x07)){
	    			
	                if(DEBUG){
	                	Log.e(TAG, "Decoding : " + receiveBuf[5]);
	                	
	                }
	                /*
	                if((receiveBuf[5] & 0x01) == 0x01){
	                	ivSw1.setImageResource(R.drawable.gpio_on);
	                } else {
	                	ivSw1.setImageResource(R.drawable.gpio_off);                	
	                }
	                if((receiveBuf[5] & 0x02) == 0x02){
	                	ivSw2.setImageResource(R.drawable.gpio_on);
	                } else {
	                	ivSw2.setImageResource(R.drawable.gpio_off);                	
	                }
	                if((receiveBuf[5] & 0x04) == 0x04){
	                	ivSw3.setImageResource(R.drawable.gpio_on);
	                } else {
	                	ivSw3.setImageResource(R.drawable.gpio_off);                	
	                }
	                if((receiveBuf[5] & 0x08) == 0x08){
	                	ivSw4.setImageResource(R.drawable.gpio_on);
	                } else {
	                	ivSw4.setImageResource(R.drawable.gpio_off);                	
	                }
	                if((receiveBuf[5] & 0x10) == 0x10){
	                	ivSw5.setImageResource(R.drawable.gpio_on);
	                } else {
	                	ivSw5.setImageResource(R.drawable.gpio_off);                	
	                }
	                if((receiveBuf[5] & 0x20) == 0x20){
	                	ivSw6.setImageResource(R.drawable.gpio_on);
	                } else {
	                	ivSw6.setImageResource(R.drawable.gpio_off);                	
	                }
	                if((receiveBuf[5] & 0x40) == 0x40){
	                	ivSw7.setImageResource(R.drawable.gpio_on);
	                } else {
	                	ivSw7.setImageResource(R.drawable.gpio_off);                	
	                }
	                if((receiveBuf[5] & 0x80) == 0x80){
	                	ivSw8.setImageResource(R.drawable.gpio_on);
	                } else {
	                	ivSw8.setImageResource(R.drawable.gpio_off);                	
	                }
	                
	    			*/
	    		}
	    	}
	    }
}
	    		
	    	


	  
	   