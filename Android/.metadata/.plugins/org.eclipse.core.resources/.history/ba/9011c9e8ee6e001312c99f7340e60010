package com.ej.moving;

import com.ej.joystic.JoystickMovedListener;
import com.ej.joystic.JoystickView;

import android.app.Activity;
import android.app.AlertDialog;
import android.bluetooth.BluetoothAdapter;
import android.bluetooth.BluetoothDevice;
import android.content.DialogInterface;
import android.content.Intent;
import android.graphics.drawable.BitmapDrawable;
import android.graphics.drawable.Drawable;
import android.hardware.Sensor;
import android.hardware.SensorEvent;
import android.hardware.SensorEventListener;
import android.hardware.SensorManager;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.util.Log;
import android.view.Menu;
import android.view.MenuInflater;
import android.view.MenuItem;
import android.view.MotionEvent;
import android.view.View;
import android.view.View.OnTouchListener;
import android.view.Window;
import android.view.WindowManager;
import android.widget.ImageButton;
import android.widget.RadioGroup;
import android.widget.RadioGroup.OnCheckedChangeListener;
import android.widget.SeekBar;
import android.widget.TextView;
import android.widget.Toast;
import android.widget.ToggleButton;

public class CarActivity extends Activity {
    // Intent request codes
    private static final int REQUEST_CONNECT_DEVICE = 1;
    private static final int REQUEST_ENABLE_BT = 2;
    public static String EXTRA_DEVICE_ADDRESS = "device_address";
    private static TextView mTitle;
    private static TextView mTextProgress;
    
    private static int speedCnt;
    private static int progressBackup;
    private static byte sendData;
    private boolean _isBtnDown;
    private boolean _isLeft;
    private boolean _isGyro;
    
    ImageButton ib1;
    ImageButton ib2;
    ImageButton ib3;
    Drawable alpha1, alpha2;

	SensorManager mSensorManager;
	Sensor mSensor; 

	private String mConnectedDeviceName = null;

    public static final boolean DEBUG = true;
	
    public static final boolean LOG_CHARACTERS_FLAG = DEBUG && false;

    public static final boolean LOG_UNKNOWN_ESCAPE_SEQUENCES = DEBUG && false;

    public static final String LOG_TAG = "FirmTech";

    // Message types sent from the BluetoothReadService Handler
    public static final int MESSAGE_STATE_CHANGE = 1;
    public static final int MESSAGE_READ = 2;
    public static final int MESSAGE_WRITE = 3;
    public static final int MESSAGE_DEVICE_NAME = 4;
    public static final int MESSAGE_TOAST = 5;	

    // Key names received from the BluetoothChatService Handler
    public static final String DEVICE_NAME = "device_name";
    public static final String TOAST = "toast";	

	private BluetoothAdapter mBluetoothAdapter = null;

    /**
     * Our main view. Displays the emulated terminal screen.
     */
    //private EmulatorView mEmulatorView;


    private static BluetoothSerialService mSerialService = null;
	
	//private static InputMethodManager mInputManager;
	
	private boolean mEnablingBT;
    private boolean mLocalEcho = false;
    private int mFontSize = 9;
    private int mColorId = 2;
    private int mControlKeyId = 0;
	
    private static final String LOCALECHO_KEY = "localecho";
    private static final String FONTSIZE_KEY = "fontsize";
    private static final String COLOR_KEY = "color";
    private static final String CONTROLKEY_KEY = "controlkey";

    public static final int WHITE = 0xffffffff;
    public static final int BLACK = 0xff000000;
    public static final int BLUE = 0xff344ebd;

    private static final int[][] COLOR_SCHEMES = {
        {BLACK, WHITE}, {WHITE, BLACK}, {WHITE, BLUE}};

    private static String[] CONTROL_KEY_NAME;

    private int mControlKeyCode;

    //private SharedPreferences mPrefs;
	
	private MenuItem mMenuItemConnect;
	
	TextView txtX, txtY, txtState;
	JoystickView joystick;

    /** Called when the activity is first created. */
    @Override
    public void onCreate(Bundle savedInstanceState) {
    		
        super.onCreate(savedInstanceState);


        // Set up the window layout
        requestWindowFeature(Window.FEATURE_CUSTOM_TITLE);
 //       setContentView(R.layout.car);
        setContentView(R.layout.joystick);
        
        getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);	// 화면 안 꺼지도록


        getWindow().setFeatureInt(Window.FEATURE_CUSTOM_TITLE, R.layout.custom_title);



        // Set up the custom title
        mTitle = (TextView) findViewById(R.id.title_left_text);
        mTitle.setText(R.string.app_name);
        mTitle = (TextView) findViewById(R.id.title_right_text);         
        
		txtX = (TextView)findViewById(R.id.TextViewX);
        txtY = (TextView)findViewById(R.id.TextViewY);
        txtState = (TextView)findViewById(R.id.TextViewstate);
        joystick = (JoystickView)findViewById(R.id.joystickView);
        
        joystick.setOnJostickMovedListener(_listener);
	
 
	mBluetoothAdapter = BluetoothAdapter.getDefaultAdapter();

	if (mBluetoothAdapter == null) {
            finishDialogNoBluetooth();
            return;
	}

        mSerialService = new BluetoothSerialService(this, mHandlerBT);   
        
        

    }



	@Override
	public void onStart() {
		super.onStart();
		if (DEBUG)
			Log.e(LOG_TAG, "++ ON START ++");
		
		mEnablingBT = false;	
		
	}

	@Override
	public synchronized void onResume() {
		super.onResume();

		if (DEBUG) {
			Log.e(LOG_TAG, "+ ON RESUME +");
		}	
		
		
		if (!mEnablingBT) { // If we are turning on the BT we cannot check if it's enable
		    if ( (mBluetoothAdapter != null)  && (!mBluetoothAdapter.isEnabled()) ) {
			
                AlertDialog.Builder builder = new AlertDialog.Builder(this);
                builder.setMessage(R.string.alert_dialog_turn_on_bt)
                    .setIcon(android.R.drawable.ic_dialog_alert)
                    .setTitle(R.string.alert_dialog_warning_title)
                    .setCancelable( false )
                    .setPositiveButton(R.string.alert_dialog_yes, new DialogInterface.OnClickListener() {
                    	public void onClick(DialogInterface dialog, int id) {
                    		mEnablingBT = true;
                    		Intent enableIntent = new Intent(BluetoothAdapter.ACTION_REQUEST_ENABLE);
                    		startActivityForResult(enableIntent, REQUEST_ENABLE_BT);			
                    	}
                    })
                    .setNegativeButton(R.string.alert_dialog_no, new DialogInterface.OnClickListener() {
                    	public void onClick(DialogInterface dialog, int id) {
                    		finishDialogNoBluetooth();            	
                    	}
                    });
                AlertDialog alert = builder.create();
                alert.show();
}		
		
		    if (mSerialService != null) {
		    	// Only if the state is STATE_NONE, do we know that we haven't started already
		    	if (mSerialService.getState() == BluetoothSerialService.STATE_NONE) {
		    		// Start the Bluetooth chat services
		    		mSerialService.start();
		    	}
		    }

		    if (mBluetoothAdapter != null) {
		    	//readPrefs();
		    	//updatePrefs();

		    	//mEmulatorView.onResume();
		    }
		}
	}
    @Override
    public void onStop() {
        super.onStop();
        if(DEBUG)
        	Log.e(LOG_TAG, "-- ON STOP --");
        
            
    }


	@Override
	public void onDestroy() {
		super.onDestroy();
		if (DEBUG)
			Log.e(LOG_TAG, "--- ON DESTROY ---");
		
        if (mSerialService != null)
        	mSerialService.stop();
        
	}
	
	protected void onPause() {
		super.onPause();
	}
	 
    public int getConnectionState() {
		return mSerialService.getState();
	}


    public void send(byte[] out) {
    	mSerialService.write( out );
    }

    public int getTitleHeight() {
    	return mTitle.getHeight();
    }
    
    // The Handler that gets information back from the BluetoothService
    private final Handler mHandlerBT = new Handler() {
    	
        @Override
        public void handleMessage(Message msg) {        	
            switch (msg.what) {
            case MESSAGE_STATE_CHANGE:
                if(DEBUG) Log.i(LOG_TAG, "MESSAGE_STATE_CHANGE: " + msg.arg1);
                switch (msg.arg1) {
                case BluetoothSerialService.STATE_CONNECTED:
                	if (mMenuItemConnect != null) {
                		mMenuItemConnect.setIcon(android.R.drawable.ic_menu_close_clear_cancel);
                		mMenuItemConnect.setTitle(R.string.disconnect);
                	}
                	
                	//mInputManager.showSoftInput(mEmulatorView, InputMethodManager.SHOW_IMPLICIT);
                	
                    mTitle.setText(R.string.title_connected_to);
                    mTitle.append(mConnectedDeviceName);
                    break;
                    
                case BluetoothSerialService.STATE_CONNECTING:
                    mTitle.setText(R.string.title_connecting);
                    break;
                    
                case BluetoothSerialService.STATE_LISTEN:
                case BluetoothSerialService.STATE_NONE:
                	if (mMenuItemConnect != null) {
                		mMenuItemConnect.setIcon(android.R.drawable.ic_menu_search);
                		mMenuItemConnect.setTitle(R.string.connect);
                	}

            		//mInputManager.hideSoftInputFromWindow(mEmulatorView.getWindowToken(), 0);
                	
                    mTitle.setText(R.string.title_not_connected);
                    break;
                }
                break;
            case MESSAGE_WRITE:
            	if (mLocalEcho) {
            		byte[] writeBuf = (byte[]) msg.obj;
            		//mEmulatorView.write(writeBuf, msg.arg1);
            	}
                
                break;
/*                
            case MESSAGE_READ:
                byte[] readBuf = (byte[]) msg.obj;              
                mEmulatorView.write(readBuf, msg.arg1);
                
                break;
*/                
            case MESSAGE_DEVICE_NAME:
                // save the connected device's name
                mConnectedDeviceName = msg.getData().getString(DEVICE_NAME);
                Toast.makeText(getApplicationContext(), "Connected to "
                               + mConnectedDeviceName, Toast.LENGTH_SHORT).show();
                break;
            case MESSAGE_TOAST:
                Toast.makeText(getApplicationContext(), msg.getData().getString(TOAST),
                               Toast.LENGTH_SHORT).show();
                break;
            }
        }
    };    

    
    public void finishDialogNoBluetooth() {
        AlertDialog.Builder builder = new AlertDialog.Builder(this);
        builder.setMessage(R.string.alert_dialog_no_bt)
        .setIcon(android.R.drawable.ic_dialog_info)
        .setTitle(R.string.app_name)
        .setCancelable( false )
        .setPositiveButton(R.string.alert_dialog_ok, new DialogInterface.OnClickListener() {
                   public void onClick(DialogInterface dialog, int id) {
                       finish();            	
                	   }
               });
        AlertDialog alert = builder.create();
        alert.show(); 
    }
    

  
    
    
    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        MenuInflater inflater = getMenuInflater();
        inflater.inflate(R.menu.option_menu, menu);
        mMenuItemConnect = menu.getItem(0);
        return true;
    }  
    
    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        switch (item.getItemId()) {
        case R.id.connect:
        	
        	if (getConnectionState() == BluetoothSerialService.STATE_NONE) {
        		// Launch the DeviceListActivity to see devices and do scan
        		Intent serverIntent = new Intent(this, DeviceListActivity.class);
        		startActivityForResult(serverIntent, REQUEST_CONNECT_DEVICE);
        	}
        	else
            	if (getConnectionState() == BluetoothSerialService.STATE_CONNECTED) {
            		mSerialService.stop();
		    		mSerialService.start();
            	}
            return true;
        case R.id.menu_Info:
            doDocumentKeys();
            return true;
        }
        return false;
    }
        


    
    public void onActivityResult(int requestCode, int resultCode, Intent data) {
        if(DEBUG) Log.d(LOG_TAG, "onActivityResult " + resultCode);
        switch (requestCode) {
        
        case REQUEST_CONNECT_DEVICE:

            // When DeviceListActivity returns with a device to connect
            if (resultCode == Activity.RESULT_OK) {
                // Get the device MAC address
                String address = data.getExtras()
                                     .getString(EXTRA_DEVICE_ADDRESS);
                // Get the BLuetoothDevice object
                BluetoothDevice device = mBluetoothAdapter.getRemoteDevice(address);
                // Attempt to connect to the device
                mSerialService.connect(device);                
            }
            break;

        case REQUEST_ENABLE_BT:
            // When the request to enable Bluetooth returns
            if (resultCode == Activity.RESULT_OK) {
                Log.d(LOG_TAG, "BT not enabled");
                
                finishDialogNoBluetooth();                
            }
        }
    }

    private void doDocumentKeys() {
        new AlertDialog.Builder(this).
            setTitle("Program Ver : ").
            setMessage("2.0.0\n").
            show();
     }
    
    public void speedNeutral() {
    	byte[] buffer = new byte[4];
    	
    	sendData = 0;
    	
    	buffer[0] = (byte)0x55;
    	buffer[1] = (byte)0xAA;
    	buffer[2] = (byte)0x01;
    	buffer[3] = (byte)0x50;
 
    	mSerialService.write(buffer);  	
    }    
    
    public void speedUp() {
    	byte[] buffer = new byte[4];
    	
    	sendData = (byte) (sendData & 0x0f);
    	sendData = (byte) (sendData | 0x40);
    	
    	buffer[0] = (byte)0x55;
    	buffer[1] = (byte)0xAA;
    	buffer[2] = (byte)0x01;
    	buffer[3] = (byte)0x10;
 
    	mSerialService.write(buffer);  	
    }     
    
    public void speedDown() {
    	byte[] buffer = new byte[4];
  
    	sendData = (byte) (sendData & 0x0f);
    	sendData = (byte) (sendData | 0x50);    	
    	
    	buffer[0] = (byte)0x55;
    	buffer[1] = (byte)0xAA;
    	buffer[2] = (byte)0x01;
    	buffer[3] = (byte)0x20;
 
    	mSerialService.write(buffer);  	
    } 
    public void direcRight() {
    	byte[] buffer = new byte[4];
  
    	sendData = (byte) (sendData & 0x0f);
    	sendData = (byte) (sendData | 0x50);    	
    	
    	buffer[0] = (byte)0x55;
    	buffer[1] = (byte)0xAA;
    	buffer[2] = (byte)0x01;
    	buffer[3] = (byte)0x4F;
 
    	mSerialService.write(buffer);  	
    } 
    public void direcLeft() {
    	byte[] buffer = new byte[4];
  
    	sendData = (byte) (sendData & 0x0f);
    	sendData = (byte) (sendData | 0x50);    	
    	
    	buffer[0] = (byte)0x55;
    	buffer[1] = (byte)0xAA;
    	buffer[2] = (byte)0x01;
    	buffer[3] = (byte)0x3F;

    	mSerialService.write(buffer);  	
    } 
    /*
    public void sendDirection(byte d) {
    	byte[] buffer = new byte[8];
    	
    	if(progressBackup < 45){
    		sendData = d;
    		sendData = (byte) (sendData | 0x04);
    	} else {
    		sendData = d;
    	}
      	
    	buffer[0] = (byte)0x0b;
    	buffer[1] = (byte)0x0b;
    	buffer[2] = (byte)0x03;
    	buffer[3] = (byte)0x01;
    	buffer[4] = (byte)sendData;
    	buffer[5] = (byte)0x00;
    	buffer[6] = (byte)0x0f;
    	buffer[7] = (byte)0x0f;
 
    	mSerialService.write(buffer);  	
    } 
    */
	public void onAccuracyChanged(Sensor sensor, int accuracy) {
	}
    /*
	public void onSensorChanged(SensorEvent event) {
		
        synchronized (this) {
            switch (event.sensor.getType()){
                case Sensor.TYPE_ACCELEROMETER:
                    
            		
                    if ((mSerialService != null) && (_isGyro == true)){
                        // Robert -2 -> -5, 0->2
                		if((event.values[1] >-5.0) && (event.values[1] < 2)){
                			// Center
                			touchHandler.sendEmptyMessage(1);
                			
                		} else if(event.values[1] <= -5.0){
                			// Left
                			touchHandler.sendEmptyMessage(2);
                		} else if(event.values[1] >= 2){
                			// Right
                			touchHandler.sendEmptyMessage(3);
                		}                      	
                    }
                    
                break;
    
            }
        }
        
     }    
    */
    
	   private JoystickMovedListener _listener = new JoystickMovedListener() {

			@Override
			public void OnMoved(int pan, int tilt) {
				txtX.setText(Integer.toString(pan));
				txtY.setText(Integer.toString(tilt));	
				
				if((pan>-10||pan<10)&&(tilt>-10||tilt<0)){//전진
					speedUp();
					txtState.setText("forward");
				}
				else if((pan>0||pan<10)&&(tilt>-10||tilt<10)){//우회전
					direcRight();
					txtState.setText("turn right");
				}
				else if((pan>-10||pan<10)&&(tilt>0||tilt<10)){//후진
					speedDown();
					txtState.setText("turn left");
				}
				else if((pan>-10||pan<0)&&(tilt>-10||tilt<10)){//좌회전
					direcLeft();
					txtState.setText("backward");
				}
				else if(pan==0 && tilt==0){
					speedNeutral();
				}
			}
			
			public void CarMove(int pan, int tilt){
			
			}

			@Override
			public void OnReleased() {
				txtX.setText("released");
				txtY.setText("released");
			}
			
			public void OnReturnedToCenter() {
				txtX.setText("stopped");
				txtY.setText("stopped");
			};
		}; 
	/*
    private SeekBar.OnSeekBarChangeListener sbListener
     = new SeekBar.OnSeekBarChangeListener()
    {
		public void onStartTrackingTouch(SeekBar arg0) {
			// TODO Auto-generated method stub
			
		}
	
		public void onStopTrackingTouch(SeekBar seekBar) {
			// TODO Auto-generated method stub
			
			//int progress = seekBar.getProgress();			
		}   
	
	    public void onProgressChanged(SeekBar seekBar, int progress,
	     boolean fromUser){
//	        mTextProgress.setText(new StringBuilder().append(progress));
	        
	        if (mSerialService != null) {
		        if(progress > 55){
		        	sendData = (byte) (sendData & (~0x04));	        	
		        	sendData = (byte) (sendData | 0x01);
		        	
		        	
		        	while(progressBackup != progress)
		        	{
			        	if(progressBackup < progress){
			        		speedUp();
			        		progressBackup++;
			        	}else if(progressBackup > progress){
			        		speedDown();
			        		progressBackup--;
			        	}		        		
		        	}
		        	
		        	
		        }else if((progress >= 45) && (progress <= 55)){
		        	speedNeutral();
		        }else {
		        	sendData = (byte) (sendData | 0x04);
		        	sendData = (byte) (sendData | 0x01);
		        	
		        	while(progressBackup != progress)
		        	{
			        	if(progressBackup < progress){
			        		speedDown();
			        		progressBackup++;			        		
			        	}else if(progressBackup > progress){
			        		speedUp();
			        		progressBackup--;
			        	}		        	
		        		
		        	}
		        	
		        }
	        	
	        }
	        
	        
	        progressBackup = progress;		
	        

	   }
    };
    */
  /*  
   private void onBtnDown()
   {
       TouchThread kThread = new TouchThread();
       kThread.start();
   }
    
   private Handler touchHandler = new Handler()
   {
       public void handleMessage(android.os.Message msg)
       {
    	   if(msg.what == 2){
    		   sendDirection((byte)2);
    	   } else if(msg.what == 3){
    		   sendDirection((byte)3);
    	   } else {
    		   sendDirection((byte) 1);
    	   }
       }
   };
    
   private class TouchThread extends Thread
   {
       @Override
       public void run()
       {
           super.run();
            
           while (_isBtnDown)
           {
        	   if(_isLeft){
        		   touchHandler.sendEmptyMessage(2);
        	   } else {
                   touchHandler.sendEmptyMessage(3);        		   
        	   }
                
               try
               {
                   Thread.sleep(200);
               } catch (InterruptedException e)
               {
                   e.printStackTrace();
               }
           }
       }
   }
    

   private OnTouchListener onBtnTouchListener = new OnTouchListener(){
  
       public boolean onTouch(View v, MotionEvent $e)
       {
    	   if (mSerialService == null) {
    		   return false;
    	   }
    	   
    	   
           switch ($e.getAction())
           {
               case MotionEvent.ACTION_DOWN:
            	   
            	   if (v.getId() == R.id.imageButton3){

            		   if(_isGyro == false){
            			   ib1.setVisibility(View.INVISIBLE);   
            			   ib2.setVisibility(View.INVISIBLE); 
            			   _isGyro = true;  
            			   
            			   ib3.setImageResource(R.drawable.gyro);
            		   } else {
		               	   ib1.setVisibility(View.VISIBLE);   
		               	   ib2.setVisibility(View.VISIBLE); 
		               	   _isGyro = false;
		               	   
		               	   ib3.setImageResource(R.drawable.normal);
            		   }
               			break;
            		   
            	   } else if (v.getId() == R.id.imageButton1){
                	   _isLeft = true;
                	   
                	   alpha1.setAlpha(100); 
                	   
                   } else {
                	   _isLeft = false;
                	   alpha2.setAlpha(100); 
                   }
                   _isBtnDown = true;
                   onBtnDown();
                   break;
                
               case MotionEvent.ACTION_UP:
            	   
            	   if (v.getId() != R.id.imageButton3){
	                   _isBtnDown = false;
	                   
	                   alpha1.setAlpha(0); 
	                   alpha2.setAlpha(0); 
	                   sendDirection((byte) 1);
            	   }
                   break;
                
               default:
                   break;
           }
           return false;
       }
   };    
    
    */
}
